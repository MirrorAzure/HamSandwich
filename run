#!/bin/bash
set -euo pipefail

# Help
show_help() {
	echo "Usage: $0 [<setting=value>] <project> [-- <arguments>]"
	echo "Settings:"
	echo "    os=             One of:  windows  linux  macos  emscripten"
	echo "    mode=           One of:  debug  release"
	echo "    platform=       One of:  x86  x86_64"
	echo "    preset=         Set os, mode, and platform together, ex: windows-i686-release"
	echo "    nobuild=1       Skip compiling before running."
	echo "    tool=gdb        Start GDB prepared to debug the game."
	echo "    tool=valgrind   Run the game under valgrind memory checker (slow)."
	echo "    tool=callgrind  Run the game under callgrind profiler (slow)."
	echo "    tool=two        Run two instances of the game at once."
}

# Default settings.
project=
os=
platform=
mode=debug
preset=
nobuild=
tool=
override_args=

# Read command-line arguments.
while test $# -ne 0; do
	ARG="$1"; shift
	case "$ARG" in
		# settings
		project=* | os=* | mode=* | platform=* | preset=* | nobuild=* | tool=*)
			eval "$ARG"
			;;
		# show help on demand
		--help)
			show_help; exit
			;;
		--)
			# -- indicates the start of overriden arguments
			override_args=1
			break
			;;
		# transitional adapters from ./run
		"--fullscreen")
			override_args=1
			;;
		"--release")
			mode=release
			;;
		"--gdb")
			tool=gdb
			;;
		"--valgrind")
			tool=valgrind
			;;
		"--callgrind")
			tool=callgrind
			;;
		"--nobuild")
			nobuild=1
			;;
		"--web")
			os=emscripten
			;;
		"--two")
			tool=two
			;;
		# show help for unsupported settings or flags
		*=* | -*)
			show_help; exit 1
			;;
		# a setting without a variable name is $project
		*)
			project="$ARG"
			;;
	esac
done

# Abort if no project was specified.
if test -z "$project"; then
	show_help; exit 1
fi

# Fallback settings.
if test -z "$preset"; then
	if test -z "$os"; then
		# Detect OS and architecture.
		case "$(uname -sm)" in
			MINGW32*)
				os=windows
				platform=i686
				;;
			MINGW64*)
				os=windows
				platform=x86_64
				;;
			"Linux x86_64")
				os=linux
				platform=x86_64
				;;
			"Darwin x86_64")
				os=macos
				platform=x86_64
				;;
			*)
				echo "Unknown \`uname -sm\`: $(uname -sm)"
				exit 1
		esac
	elif test -z "$platform"; then
		# Use default architecture for chosen OS.
		case "$os" in
			windows|emscripten)
				platform=i686
				;;
			linux|macos)
				platform=x86_64
				;;
		esac
	fi
	preset="$os-$platform-$mode"
fi

if test -z "$tool" && test "$os" = "emscripten"; then
	tool=emrun
	source ./tools/emscripten/install-emsdk.sh
fi

# Build and install
if test -z "$nobuild"; then
	make preset="$preset" "$project"
	cmake --install "build/cmake-$preset" --prefix "build/install"
fi

# Default debug configuration
debugdir="$PWD/build/install"
debugcommand="$PWD/build/cmake-$preset/source/$project/$project"
debugargs=("window")
debugenvs=()

# Run the game executable or tool.
mkdir -p "$debugdir"
cd "$debugdir"
if test ${#debugenvs[@]} -ne 0; then
	export "${debugenvs[@]}"
fi
if test "$override_args"; then
	debugargs=("$@")
fi
case "$tool" in
	gdb)
		echo "==== Debugging $project ($preset) ===="
		# Catches "the runtime was asked to terminate in an usual way".
		# If libc++ is dynamically linked, the breakpoint should be pending.
		gdb -q \
			-ex 'set breakpoint pending on' \
			-ex 'break abort' \
			-ex 'set breakpoint pending auto' \
			--args "$debugcommand" "${debugargs[@]}"
		;;
	valgrind)
		echo "==== Valgrinding $project ($preset) ===="
		valgrind "$debugcommand" "${debugargs[@]}"
		;;
	callgrind)
		echo "==== Callgrinding $project ($preset) ===="
		valgrind --tool=callgrind "$debugcommand" "${debugargs[@]}"
		;;
	emrun)
		echo "==== Hosting $project ($preset) ===="
		emrun --serve_after_close "build/cmake-$preset/source/$project/index.html"
		;;
	two)
		echo "==== Running $project ($preset) ===="
		"$debugcommand" "${debugargs[@]}" &
		"$debugcommand" "${debugargs[@]}"
		;;
	"")
		echo "==== Running $project ($preset) ===="
		"$debugcommand" "${debugargs[@]}"
		;;
	*)
		echo "$0: unknown tool: $tool"
		exit 1
		;;
esac
