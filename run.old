#!/bin/bash
# ./run - build then run a project in the appropriate directory
set -euo pipefail

# Ensure all build-time dependencies are installed.
./tools/build/install-deps.sh

# Default settings
project=
toolset=gcc
config=
mode=debug
platform=x86
nobuild=
tool=
override_args=

# MINGW64 and 64-bit Ubuntu prefer x86_64 automatically.
if test "${MSYSTEM:-}" = "MINGW32"; then
	platform=x86
elif test "${MSYSTEM:-}" = "MINGW64"; then
	platform=x86_64
elif test "$(uname -m)" = "x86_64"; then
	platform=x86_64
fi

# Helpers
show_help() {
	load_run_config
	echo "Usage: $0 [<setting=value>] <project> [-- <arguments>]"
	echo "Available projects:"
	echo "    ${exeprojects[*]}"
	echo "Settings:"
	echo "    toolset=        One of:  gcc  clang  emcc"
	echo "    mode=           One of:  debug  release"
	echo "    platform=       One of:  x86  x86_64"
	echo "    config=         Set mode and platform together, ex: release_x86_64"
	echo "    nobuild=1       Skip compiling before running."
	echo "    tool=gdb        Start GDB prepared to debug the game."
	echo "    tool=valgrind   Run the game under valgrind memory checker (slow)."
	echo "    tool=callgrind  Run the game under callgrind profiler (slow)."
	echo "    tool=two        Run two instances of the game at once."
}

load_run_config() {
	make --quiet toolset="$toolset" "build/$toolset/run-config.sh"
	source "build/$toolset/run-config.sh"; declare exeprojects
	# Only load the config once, even if we need it multiple times.
	load_run_config() { :; }
}

# Read command-line arguments.
while test $# -ne 0; do
	ARG="$1"; shift
	case "$ARG" in
		# settings
		toolset=* | config=* | mode=* | platform=* | nobuild=* | tool=*)
			eval "$ARG"
			;;
		# show help on demand
		--help)
			show_help; exit
			;;
		--)
			# -- indicates the start of overriden arguments
			override_args=1
			break
			;;
		# transitional adapters from ./run
		"--fullscreen")
			override_args=1
			;;
		"--release")
			mode=release
			;;
		"--32")
			platform=x86
			;;
		"--64")
			platform=x86_64
			;;
		"--gdb")
			tool=gdb
			;;
		"--valgrind")
			tool=valgrind
			;;
		"--callgrind")
			tool=callgrind
			;;
		"--nobuild")
			nobuild=1
			;;
		"--clang")
			toolset=clang
			;;
		"--web")
			toolset=emcc
			;;
		"--two")
			tool=two
			;;
		# show help for unsupported settings or flags
		*=* | -*)
			show_help; exit 1
			;;
		# a setting without a variable name is $project
		*)
			project="$ARG"
			;;
	esac
done

# Abort if no project was specified.
if test -z "$project"; then
	show_help; exit 1
fi

# Force some configurations if Emscripten is active.
if test "$toolset" = "emcc"; then
	tool=emrun
	platform=x86

	# If there's no Emscripten SDK active, then activate a private one.
	if ! command -v em++ >/dev/null 2>&1; then
		source ./tools/emscripten/install-emsdk.sh
	fi
fi

# Build $config from $mode and $platform if needed.
if test -z "$config"; then
	config="${mode}_$platform"
fi

# Build the project.
if test -z "$nobuild"; then
	make -j"$(nproc)" config="$config" toolset="$toolset" "$project"
fi

# Migrate `build/installers/` to `installers/`.
if ! test -e "installers" && test -d "build/installers"; then
	mv build/installers installers
fi

# Migrate fully-extracted appdata to new appdata-only location as a fallback
if test -d "build/game/$project"; then
	./tools/build/migrate-appdata.sh "$project" "build/game/$project" "appdata/$project"
fi

# Now that the settings are known, load the debug config.
load_run_config
debug_configure; declare debugdir debugcommand debugargs debugenvs

# Prompt to download installers if not already present.
if test "$toolset" != "emcc"; then
	show_header() {
		echo "==== Downloading installers ===="
		mkdir -p "$INSTDIR"
		show_header() { :; }
	}

	handler() {
		declare filename link sha256sum file_id  # inputs
		INSTDIR="installers"

		while test ! -f "$INSTDIR/$filename"; do
			show_header
			curl -o "$INSTDIR/$filename" "$(curl -s -X POST "$link/file/$file_id" | jq -r .url)"
		done
		while ! sha256sum -c <<<"$sha256sum *$INSTDIR/$filename"; do
			show_header
			echo "That looks like the wrong file, please download '$filename' again:"
			echo "    $link"
			echo "Press Enter when finished, or Ctrl-C to cancel."
			read -r
		done
	}
	iterate_installers handler
fi

# Run the game executable or tool.
mkdir -p "$debugdir"
cd "$debugdir"
if test ${#debugenvs[@]} -ne 0; then
	export "${debugenvs[@]}"
fi
if test "$override_args"; then
	debugargs=("$@")
fi
case "$tool" in
	gdb)
		echo "==== Debugging $project ($config) ===="
		# Catches "the runtime was asked to terminate in an usual way".
		# If libc++ is dynamically linked, the breakpoint should be pending.
		gdb -q \
			-ex 'set breakpoint pending on' \
			-ex 'break abort' \
			-ex 'set breakpoint pending auto' \
			--args "$debugcommand" "${debugargs[@]}"
		;;
	valgrind)
		echo "==== Valgrinding $project ($config) ===="
		valgrind "$debugcommand" "${debugargs[@]}"
		;;
	callgrind)
		echo "==== Callgrinding $project ($config) ===="
		valgrind --tool=callgrind "$debugcommand" "${debugargs[@]}"
		;;
	emrun)
		echo "==== Hosting $project ($config) ===="
		emrun --serve_after_close "index.html"
		;;
	two)
		echo "==== Running $project ($config) ===="
		"$debugcommand" "${debugargs[@]}" &
		"$debugcommand" "${debugargs[@]}"
		;;
	"")
		echo "==== Running $project ($config) ===="
		"$debugcommand" "${debugargs[@]}"
		;;
	*)
		echo "$0: unknown tool: $tool"
		exit 1
		;;
esac
